modules - Undergraduate - Newcastle University Skip to main content Skip to Content Toggle Search Search Toggle Main Menu About Academic units Annual report Athena SWAN Catering Contact details Events Financial statements Governance Job vacancies Maps & directions Press Office Key dates Vision 2021 Research Research centres Research facilities Research impact Research institutes Societal challenges Study Undergraduate Study A-Z degrees Fees & finance How to apply Open Day Careers & Employability City life Student life Postgraduate Study Search courses Funding Careers Student life How to apply Meet us Our campuses Newcastle city centre campus Campus for Ageing and Vitality Newcastle International Centre for Life Newcastle University London NUMed Malaysia Newcastle University International Singapore Online & distance learning Continuing Professional Development (CPD) Student Services Information for parents & carers Information for schools & colleges Accommodation International International study International Relations INTO Newcastle University Fees & scholarships Study abroad Exchange programmes Visa support Newcastle University London NUMed Malaysia Newcastle University International Singapore Engage Alumni Association Giving to Newcastle Services for Business Work with us Conferences Consultancy Contact Us Staff & Students Staff Homepage People Search Student Homepage Student Services Student Wellbeing Student Progress Examinations Careers Computing (NUIT) Library Sport Accommodation Congregations Students' Union Paying accommodation and tuition fees Replacement degree certificates Undergraduate Newcastle University >Undergraduate>Find a Degree>modules modules Modules CSC1022 : Programming II Offered for Year: 2017/18 Module Leader(s): Dr Neil SpeirsDemonstrator: Miss Laura HeelsOther Staff: Dr Jennifer WarrenderOwning School: ComputingTeaching Location: Newcastle City CampusSemesters Semester 2 Credit Value: 20 ECTS Credits: 10.0 AimsTo give students a deeper understanding of OO design issues and data structure implementation and use. To illustrate these ideas using examples taken from standard Java libraries. To provide a deeper insight into fundamental programming concepts. This module will cover a variety of abstractions and representations (e.g. lists, stacks, queues, trees) making use of the Java Collections framework (a sophisticated Java library). It will introduce event-driven programming, event handling in Java, GUI programming with AWT/Swing, case studies taken from Java libraries (e.g. java.util, javax.swing). Outline Of SyllabusProgramming Fundamentals – problem solving • Debugging strategies • The concept and properties of algorithms Programming Fundamentals – data structures • Runtime storage management • Linked structures • Implementation strategies for stacks, queues, and hash tables • Implementation strategies for trees • Strategies for choosing the right data structure Programming fundamentals – recursion • The concept of recursion • Recursive mathematical functions • Simple recursive functions • Divide-and-conquer strategies Programming fundamentals – event driven programming • Exception handling Programming fundamentals – object oriented programming • Object-oriented design • Encapsulation and information-hiding • Separation of behaviour and implementation • Classes and subclasses • Inheritance (overriding, dynamic dispatch) • Polymorphism (subtype polymorphism vs. inheritance) Programming Languages – declarations and types • The conception of types as a set of values with together with a set of operations • Declaration models (binding, visibility, scope, and lifetime) • Garbage collection Programming Languages – abstraction mechanisms • Procedures, functions, and iterators as abstraction mechanisms • Type parameters and parameterized types Programming Languages – object oriented programming • Object-oriented design • Encapsulation and information-hiding • Separation of behaviour and implementation • Classes and subclasses • Inheritance (overriding, dynamic dispatch) • Polymorphism (subtype polymorphism vs. inheritance) • Class hierarchies • Collection classes and iteration protocols Teaching MethodsTeaching ActivitiesCategory Activity Number Length Student Hours Comment Guided Independent StudyAssessment preparation and completion440:3022:00Revision for end of semester examGuided Independent StudyAssessment preparation and completion441:0044:00Lecture follow-upScheduled Learning And Teaching ActivitiesLecture441:0044:00LecturesScheduled Learning And Teaching ActivitiesPractical221:0022:00PracticalsGuided Independent StudyProject work221:0022:00CourseworkGuided Independent StudyIndependent study232:0046:00Background readingTotal200:00 Teaching Rationale And RelationshipLectures will be used to introduce the learning material and for demonstrating the key concepts by example. Students are expected to follow-up lectures within a few days by re-reading and annotating lecture notes to aid deep learning. This is a very practical subject, and it is important that the learning materials are supported by hands-on opportunities provided by practical classes. Students are expected to spend time on coursework outside timetabled practical classes. Students aiming for 1st class marks are expected to widen their knowledge beyond the content of lecture notes through background reading. Students should set aside sufficient time to revise for the end of semester exam. Assessment MethodsThe format of resits will be determined by the Board of ExaminersExamsDescription Length Semester When Set Percentage Comment PC Examination902A60Blackboard OLA - open bookOther AssessmentDescription Semester When Set Percentage Comment Prob solv exercises2M12About 10 weekly exercises (1 hour each)Practical/lab report2M28Programming project (up to 30 hours) Assessment Rationale And RelationshipThe examination will consist of a number of "short-answer" questions to test the students' broad knowledge of programming and a section requiring the students to show greater depth of understanding of a number of key concepts introduced. The heavy weighting of coursework (40%) in this module reflects the importance of practical aspects of this module. N.B. This module has both “Exam Assessment” and “Other Assessment” (e.g. coursework). If the total mark for either assessment falls below 35%, the maximum mark returned for the module will normally be 35%. Reading Lists Reading List Website : rlo.ncl.ac.uk Timetable Timetable Website: www.ncl.ac.uk/timetable/ CSC1022's Timetable Find a DegreeAccommodationFees & FundingHow to ApplyVisiting UsStudent LifeCity LifeStudy AbroadCareers & EmployabilityTeaching & LearningContact Us Order a prospectus Make an enquiry Book an Open Day place How to apply Site map Newcastle University, NE1 7RU, United Kingdom, Telephone: (0191) 208 6000 From outside the UK dial +44 191 208 6000.Email web editor Connect with us Twitter Facebook YouTube Social media directory University site index Accessibility Legal Freedom of information Photography Credits You're looking at a section of our new website. Let us know what you think. Send us your feedback Last updated 16 February 2016 © Newcastle University