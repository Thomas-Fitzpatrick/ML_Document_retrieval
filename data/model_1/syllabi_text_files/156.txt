Module Details HomeStudyResearchBusinessGlobalAlumni 12,000 We have over 12,000 students, from over 100 countries, within one of the safest campuses in the UK 94% 94% of Lancaster students go into work or further study within six months of graduating Our CollegesVisiting CampusNews & MediaContact & Getting HereAbout UsFaculties & DepartmentsCurrent StudentsCurrent Staff Search Quick Links A-Z Index About Us Contact & Getting Here Current Staff Current Students Faculties & Departments Job Vacancies Library News & Media Online Payments Our Colleges Sitemap Student Portal Students’ Union Term Dates Visiting Campus Home Start a new search? SCC.110: Software Development Department: Computing and Communications (School of) NCF Level: FHEQ/QCF/NQF4//RQF4 Study Level: Part I Credit Points: 20.0 Start Date: 06-10-2014 End Date: 22-05-2015 Available for Online Enrolment?: N Enrolment Restriction: Fully available to all students Module Convenor: Dr J Finney Syllabus Rules and Lancaster Part II Pre-requisites Curriculum Design Assessment Weights Educational Aims Learning Outcomes Part 1 Modules Video Teaching Pattern Syllabus Rules and Pre-requisites Curriculum Design: Outline Syllabus Programming languages and their role, evolution and context. Common classifications of languages.Procedural programming. Basic types and the use of constants and variables. Control flow, and making decisions through the use of conditionals. Repeating actions through iteration and recursion. Functions and procedures. Parameter passing, formal and actual parameters pass by reference and pass by value, return types. Scoping of variables, and procedures using namespaces. Exceptions and exception handling.Compound data types including arrays, lists and structures. Linked data structures. Modularity in programs: Scoping of variables and code through code blocks and namespaces. Use of well defined APIs and libraries in promoting scalable and reusable code. Principles of loose coupling and high cohesion. Introduction to OO programming. Objects, classes and inheritance.Principles of best practice in software development, including the software development cycle, problem analysis, design formulation and the evaluation of design alternatives, literate programming and programming conventions, software commenting and documentation, testing and test case design, debugging techniques and regimen, version control. Curriculum Design: Pre-requisites/Co-requisites/Exclusions None Curriculum Design: Single, Combined or Consortial Schemes to which the Module Contributes BSc Computer ScienceBSc Computer Science InnovationBSc Software EngineeringBSc IT for Creative IndustriesBSc Management and ITBEng Computer Systems Engineering 40% Exam 60% Coursework Assessment: Details of Assessment Assessment will be through a combination of problem based lab exercises, where students are challenged to complete given programming problems. These will be supplemented by shorter quizzes (either in the form of lab or lecture quizzes) and a formal end of year exam.Resources Educational Aims: Subject Specific: Knowledge, Understanding and Skills This module aims to instil the knowledge, understanding and skills expected of a principled computer programmer. More specifically: - To develop specific skills in writing, analysing, debugging, testing and documentation of computer programs- To instil best practice of the day to day techniques associated with principled software development.- To develop a practical understanding of the software development cycle and an awareness of the challenges faced by software developers in addressing scalability and complexity in computer software. Educational Aims: General: Knowledge, Understanding and Skills Computer programming is a highly practical skill, that fosters the development of a range of transferrable skills including: - Applied problem solving- Independent learning- Structured reasoning and analysis- The development of abstract thought Learning Outcomes: Subject Specific: Knowledge, Understanding and Skills On successful completion of this module students will be able to... At the end of the course the students should be able to demonstrate subject specific knowledge, understanding and skills and have the ability to: - Work independently to develop moderately complex, robust computer programs.- Apply a principled approach to the development of a software program.- Perform effective testing of computer programs.- Undertake reasoned analysis of alternative designs for moderately complex computer programs.- Analyse and debug computer programs. - Understand the need for a structured approach to the software development process. Learning Outcomes: General: Knowledge, Understanding and Skills On successful completion of this module students will be able to... - Analyse a given problem and produce multiple potential solutions.- Undertake reasoned analysis of system.- Follow and understand a systematic process. Contact Information If you encounter any difficulties accessing Online Courses Handbook information please contact the Student Registry: Undergraduate Issues Postgraduate Issues If you require further details in relation to academic content please contact the appropriate academic department directly. Related Pages Student Portal Term Dates HomeStudyResearchBusinessGlobalAlumni Quick Links Our CollegesVisiting CampusNews & MediaContact & Getting HereAbout UsFaculties & DepartmentsCurrent StudentsCurrent Staff Job VacanciesLibraryOnline PaymentsStudents’ UnionA-Z IndexTerm DatesSitemapStudent Portal Connect With Us Like UsFacebook Follow UsTwitter Get InvolvedThe Student Room View our videosYouTube Find usFoursquare Find usLinkedIn Find usWeibo Faculties & Depts Arts & Social SciencesHealth & MedicineManagementScience & TechnologyDepartments, Institutes & Centres Contact Us Lancaster University Bailrigg Lancaster United Kingdom LA1 4YW +44 (0)1524 65201 Legal noticeFreedom of InformationPrivacy and Cookies Notice^ Back to top Copyright © 2006-2018 Lancaster University