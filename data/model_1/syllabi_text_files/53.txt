COS 126: Syllabus (Spring 2017) COS126 Syllabus Meetings Lectures Precepts Assignments Exams Help! Caution! You are looking at an out-of-date version of this website from Spring 2017.To access the current version, click here. Syllabus Description. This course is an introduction to computer science in the context of scientific, engineering, and commercial applications. The goal of the course is to teach basic principles and practical issues, while at the same time preparing students to use computers effectively for applications in computer science, physics, biology, chemistry, engineering, and other disciplines. Topics include: programming in Java; hardware and software systems; algorithms and data structures; fundamental principles of computation; and scientific computing, including simulation, optimization, and data analysis. Prerequisites. None. Video lectures. Available online. Class meetings. Class meetings are held twice per week, on Tuesdays & Thursdays. Precepts. Precepts meet twice a week, on either Tuesdays & Thursdays or Wednesdays & Fridays. Required reading. R. Sedgewick and K. Wayne, Computer Science: An Interdisciplinary Approach, Addison–Wesley Professional, 2016. ISBN 978-0134076423. We will be referencing this text all semester. The lectures are based on its contents. (Labyrinth) Staff Below you will find our contact information, but please keep in mind that it is almost always more appropriate to post your question on Piazza rather than emailing an individual staff member. Our office hours and precept schedule can be found on the Help page. Need to switch into a full precept? Please contact Colleen Kenny–McGinley. Kevin Wayne Faculty Instructor Dan Leyzberg Faculty Co-Lead Preceptor Alan Kaplan Faculty Co-Lead Preceptor Ibrahim Albluwi Faculty Co-Lead Preceptor Donna Gabai Faculty Preceptor Lawrence Lin Graduate Student Preceptor Kevin Boutarel Graduate Student Preceptor Pranjit Kalita Graduate Student Preceptor Alex Tarr Graduate Student Preceptor Laura Roberts Graduate Student Preceptor Marc Leef Graduate Student Preceptor Ashley Kling Graduate Student Preceptor Natalie Wilkinson Graduate Student Preceptor Bridger Hahn Graduate Student Preceptor Hansen Zhang Graduate Student Preceptor Precepts Precepts are an integral part of this course. We offer two formats: precepts intended for absolute beginners, called novice precepts, and those intended for beginners with some degree of comfort with computational/logical thinking, called regular precepts. This entire course is designed to be approachable for students with no computing background, but some absolute beginners enjoy having extra time in precept to cover the same material. If you miss your precept, you can attend any other precept section. All Tuesday/Wednesday and Thursday/Friday precepts contain the same instructional content. Just email both preceptors to let them know where you'll be. P01 Tuesdays & Thursdays 2:30-3:20pm with Dan Leyzberg in Friend 110 P01A Tuesdays & Thursdays 2:30-3:20pm with Lawrence Lin in Friend 111 P01B Tuesdays & Thursdays 2:30-3:20pm with Hansen Zhang in Friend 009 P02 Tuesdays & Thursdays 3:30-4:20pm with Bridger Hahn in CS 401 P02A Tuesdays & Thursdays 3:30-4:20pm with Lawrence Lin in Friend 111 P03 Tuesdays & Thursdays 4:30-5:20pm with Marc Leef in Friend 110 P03A Tuesdays & Thursdays 4:30-5:20pm with Kevin Boutarel in Friend 111 P05 Tuesdays & Thursdays 7:30-8:20pm with Marc Leef in Friend 108 P06 Wednesdays & Fridays 10:00-10:50am with Laura Roberts in Sherrerd 001 P07 Wednesdays & Fridays 11:00-11:50am with Natalie Wilkinson in Friend 110 P08 Wednesdays & Fridays 12:30-1:20pm with Alex Tarr in Friend 110 P08A Wednesdays & Fridays 12:30-1:20pm with Pranjit Kalita in Friend 111 P09 Wednesdays & Fridays 1:30-2:20pm with Ashley Kling in Friend 110 80-minute novice precepts: P11 Tuesdays & Thursdays 3:00-4:20pm with Alan Kaplan in Friend 108 P11A Tuesdays & Thursdays 3:00-4:20pm with Ibrahim Albluwi in Friend 109 P12 Tuesdays & Thursdays 4:30-5:50pm with Alan Kaplan in Friend 108 P13 Wednesdays & Fridays 11:00-12:20pm with Donna Gabai in Friend 108 P13A Wednesdays & Fridays 11:00-12:20pm with Dan Leyzberg in Friend 109 P14 Wednesdays & Fridays 1:30-2:50pm with Donna Gabai in Friend 108 P14A Wednesdays & Fridays 1:30-2:50pm with Kevin Boutarel in Friend 109 P15 Wednesdays & Fridays 3:00-4:20pm with Ibrahim Albluwi in Friend 108 Resources Help. COS 126 is a challenging course that requires a significant time commitment for most students. If you fall behind, please ask for help. Course website. This website contains a wealth of documents and online tools for you to practice and study computer science, including the course lecture slides, online programming activities (with solutions), a Java code visualizer, and an exam archive. Booksite. The booksite is a resource that accompanies the textbook for use while online (for example, while programming); it contains the code from the book and solutions to selected exercises. The textbook is for your use when initially learning new material or reinforcing your understanding of that material (for example, when reviewing for an exam). Piazza. Piazza is an online forum where you can ask and answer short questions. Blackboard. You can check your assignment and exam grades on Blackboard. Course software.This course has an associated software package called introcs that provides a complete Java programming environment. Install it on your computer by following the instructions for your operating system: Mac OS X, Windows, or Linux. Cluster computers.For students who may not have a computer or for students whose computers fail during the semester, OIT cluster machines are available in Friend Center 017. Here is information on using the labs. GRADING Course grades. Course grades are based on nine weekly programming assignments (40%), two written exams (35%), two programming exams (15%), and a final programming project (10%). There is no curve: you must earn 93.0% of the available points for an A, 90.0% for an Aâ€“, 87.0% for a B+, and so forth. Midterm exams. There are two two-part exams during the semester. One pair will be given in the middle of the semester; the other pair in the last week or so of classes. The exams have a written portion and a programming portion. There is no final exam. No makeup exams will be considered without a Dean's recommendation and our approval in advance. Programming assignments. There are nine weekly programming assignments, all equally weighted. Final project. The final project is a large programming assignment, approximately the length of two weekly assignments. It is due toward the end of Reading Period. Late work. Assignments are due on Monday nights at 11:59pm. Submissions made at 12:00am will be marked late. If any part of an assignment is submitted late, the entire assignment will be marked late. To submit an assignment late, mark the checkbox on our online submission system, Dropbox, that indicates that your work is incomplete. If the deadline has passed and the checkbox is not marked, we will grade any submitted work as-is. We will not accept any work after Dean's Date without a Dean's recommendation. Penalties for late work. Late assignments are assessed a penalty equal to 20% of the possible points on the assignment per day or partial day late. The penalties for your first four late days are automatically waived. (This waiver applies only to programming assignments, not the final project.) Additional late penalties will be waived only in the case of a medical or personal emergency, as documented in a note from a Dean, Director of Studies, or McCosh Health Center. Regrades. If you feel we have made a mistake while grading your work, write a short note describing the potential mistake and attach it to the graded work. Return it to your preceptor within two weeks of the work being handed back. Collaboration Policy This course permits (and encourages) many forms of collaboration, including with course staff, classmates, and lab TAs. However, you must be careful to collaborate only as authorized below. Here is an executive summary: YOURPARTNER COURSESTAFF COS 126GRADS CLASS-MATES OTHERPEOPLE DISCUSS CONCEPTS WITH: ✔ ✔ ✔ ✔ ✔ ACKNOWLEDGE COLLABORATION WITH: ✔ ✔ ✔ ✔ ✔ EXPOSE YOUR CODE/SOLUTIONS TO: ✔ ✔ ✔ ✘ ✘ VIEW THE CODE/SOLUTIONS OF: ✔ ✘ ✘ ✘ ✘ COPY CODE/SOLUTIONS FROM: ✘ ✘ ✘ ✘ ✘ Your solutions. You must individually compose all of your solutions. The term solutions refers to any of the products created when completing a programming assignment, such as source code (including comments) and the readme.txt file. It includes both finished and unfinished products, regardless of correctness or completeness. You must never expose solutions to anyone who is taking COS 126 now or who might take COS 126 in the future. For example, you may not place your work in a public location (such as a website, a public code repository, or a printout left in a lab). If you leave your computer unattended, be sure to protect it with a password. You must never give your solutions to anyone, except course staff. You must never receive or view someone else's solutions to a programming assignment (or variant of an assignment). These rules continue to apply even after this semester is over. Collaboration with course staff. You are welcome to discuss your solutions with course staff members (instructor and preceptors) in office hours or via private Piazza posts. Do not post or email us your code; instead, submit it via the course submission system. Collaboration with classmates. We encourage you to discuss common concerns with classmates either private via personal interactions or publicly in the Piazza course forum. These discussions must be kept at a general level, without exposing your solutions. For example, you may discuss: But, you may not: How to interpret an error message. For example, "What does StackOverflowError mean?" How to use a feature in DrJava, Terminal, or Command Prompt. For example, "How do I copy text from the Terminal?" Clarifications for the lecture videos, lecture slides, textbook, old exam questions, or the assignment specifications. Look at another classmate's solutions (or show another classmate your solutions). Lead a classmate step-by-step through any part of the assignment (or allow a classmate to lead you step-by-step through any part of the assignment). Collaboration with students who have already taken COS 126. Anyone who successfully completed COS 126 in a previous term, including lab TAs and peer tutors, may assist you in the following ways: They may look at your code. They must not write, type, or dictate code (in short, "hands in pockets"). They may help debug, but they must not give step-by-step directions on how to complete the assignment. They should give thought-provoking suggestions rather than dictating what to change. While helping you, they must not look at any other solutions, including their own. Collaboration with a partner. On certain assignments the collaboration policy is relaxed to allow working with a partner, subject to the following rules: Choose a partner whose skill level is close to your own. Complete all work with your partner, sharing the same screen. This includes debugging, testing, commenting, writing the readme.txt, and submitting the files. Go to office hours or the lab with your partner; one partner may not edit the code without the other partner present. Use the following pair programming protocol: one partner, the driver, types the code and the other partner, the navigator, reviews the code, identifies bugs, and asks questions. Swap roles every 30 minutes. Use email attachments or flash drives to transfer files with your partner. Do not post your code where it is visible to anyone but you and your partner. To dissolve a partnership, you must contact your preceptor. Collaboration acknowledgment. You must acknowledge all collaboration in the readme.txt file for that week's assignment. Plagiarism Plagiarism and abetting plagiarism are serious academic infractions. Programming is a creative work and the academic regulations that apply to plagiarizing prose also apply to plagiarizing code. Princeton's Rights, Rules, Responsibilities defines plagiarism as "the use of any outside source without proper acknowledgment." It ranges from "verbatim copying" (e.g., cutting-and-pasting code) to "thorough paraphrasing" (e.g., changing variable names or rearranging code). Outside sources and citations. Copying or adapting code that is not yours is permitted only if it comes from the course materials (i.e., the course textbook, companion booksite, programming assignment specifications, checklists, lecture slides, lecture videos, and precepts). If you do so, you must cite any code that you copy or adapt (with the exception of code that is included with the assignment). Plagiarism detection. We use sophisticated software tools to detect plagiarism. For example, we compare each submission (including interim submissions) against a code database, which includes all submissions from this offering and previous offerings of the course. While we take no pleasure in bringing cases to the Committee on Discipline; it is our duty to keep the playing field level for the overwhelming majority of students who work very hard in this course and follow the rules. Penalties. We refer alleged academic violations (including plagiarism and abetting plagiarism) to the Committee on Discipline. If found responsible, the typical penalty is an F as a course grade plus whatever penalty that the CoD imposes. (The typical CoD penalty for plagiarism is suspension from the University for one year.) Violators of course policies that are not adjudicated by the CoD will receive penalties based on the severity of the violation, ranging from a warning (for violations that are both unintentional and innocuous) to an F in the course (for violations that are both intentional and serious).