Module: Computing Programming II Module Specifications... Current Academic Year 2017 - 2018Please note that this information is subject to change. Module Title Computing Programming II Module Code CA117 School School of Computing Online Module Resources Module Co-ordinatorSemester 1: Darragh O'BrienSemester 2: Darragh O'BrienAutumn: Darragh O'BrienModule TeachersDarragh O'Brien NFQ level 8 Credit Rating 10 Pre-requisite None Co-requisite None Compatibles None Incompatibles None Description This module introduces the student to more advanced programming concepts, especially object-oriented programming through designing and using classes; it enhances familiarity with programming libraries, especially those parts associated with data structures and file handling; and it explains techniques for designing and analysing elementary algorithms. It further develops participantsâ€™ programming and problem-solving abilities, and fosters good programming discipline. Students are expected to attend lectures, participate in tutorials, carry out practical exercises in a programming laboratory, and engage extensively in hands-on programming. Learning Outcomes 1. Demonstrate a solid understanding in the selection and application of basic programming language constructs and data types required to write a simple program.2. Define instance methods and classes, and use them in writing programs of small to moderate size.3. Use the standard programming libraries, and in particular those parts of dealing with files and collections.4. Write programs that employ reading and writing text files, reading and writing sequential and random binary files, and accessing the web.5. Design and implement simple algorithms for searching, sorting, text handling, and arithmetic, and assess their time complexity.6. Given a particular problem (e.g. searching, sorting), be able to implement both iterative and recursive solutions.7. Write basic programs that use the most important data structures, including lists, sets and maps.8. Proceed from informal descriptions of simple problems to design and implementation of programming solutions.9. Comply with good software engineering principles in making programs, such as readability, maintainability, information hiding, and levels of abstraction. Workload Full-time hours per semester Type Hours Description Lecture36Course LecturesLaboratory48Lab Work - supervised learningDirected learning24Study of reference material, completion of problem setIndependent Study172Review of lecture material, background reading and independent practiceTotal Workload: 280 All module information is indicative and subject to change. For further information,students are advised to refer to the University's Marks and Standards and Programme Specific Regulations at: http://www.dcu.ie/registry/examinations/index.shtml Indicative Content and Learning Activities Objects in PythonMore on arrays, strings, static and class methods. Classes and objects. Instance variables and methods. Visibility and scope. Overloading. Initialisation. Garbage collection. User-defined classes. Object composition. Static versus dynamic.Files and ProcessesReading and writing text, unicode and binary files. Sequential and random access. Working with files and folders. Handling I/O errors and exception handling. Working with processes. Command line parameters.AlgorithmsRecursion. Binary and linear search. String handling. Simple arithmetic algorithms. Elementary sorting. Elementary complexity theory; Introduction to Big-O notation.Data StructuresSets, lists and general collections. Array implementations. Introduction to dictionaries, mapping operations and sorting using keys. Introduction to Iterators and Generators to facilitate data processing pipelines for various problem-solving workflows.DesignElementary modelling with objects. Information hiding and object composition. Case studies in designing with classes. More on problem solving techniques, problem decomposition and modular design. Assessment BreakdownContinuous Assessment50% Examination Weight50% Course Work Breakdown TypeDescription% of totalAssessment Date In Class TestLab exams (x2)40%As requiredAssignmentCompletion of a bucket-list of programming problems10%Once per semester Reassessment Requirement Resit arrangements are explained by the following categories; 1 = A resit is available for all components of the module 2 = No resit is available for 100% continuous assessment module 3 = No resit is available for the continuous assessment component This module is category 1 Indicative Reading List Zed A. Shaw: 2013, Learn Python the Hard Way: A Very Simple Introduction to the Terrifyingly Beautiful World of Computers and Code, 3rd, Addison-Wesley Professional, 978-0321884916Allen B. Downey: 2012, Think Python, 1st, O'Reilly Media, 978-1449330729 Other Resources None Array Programme or List of Programmes CABSc in Computer ApplicationsCPSSDBSc in ComputationalProblem Solv&SW Dev.DSBSc in Data ScienceTimetable this semester: Timetable for CA117 Archives:See the module specification for CA117 in 2003 - 2004See the module specification for CA117 in 2004 - 2005See the module specification for CA117 in 2005 - 2006See the module specification for CA117 in 2006 - 2007See the module specification for CA117 in 2007 - 2008See the module specification for CA117 in 2008 - 2009See the module specification for CA117 in 2009 - 2010See the module specification for CA117 in 2010 - 2011See the module specification for CA117 in 2011 - 2012See the module specification for CA117 in 2012 - 2013See the module specification for CA117 in 2013 - 2014See the module specification for CA117 in 2014 - 2015See the module specification for CA117 in 2015 - 2016See the module specification for CA117 in 2016 - 2017See the module specification for the current year Student Email Portal Disclaimer Staff Email Contact Us Moodle Privacy ,