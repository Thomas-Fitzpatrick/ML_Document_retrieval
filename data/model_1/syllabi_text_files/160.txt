Comp Sci 1MD3 Home Outline Lectures Contact Us Home Outline Lectures Contact Us Comp Sci 1MD3 Emil Sekerinski, Winter 2017 Course Outline The instructor and university reserve the right to modify elements of the course during the term. The university may change the dates and deadlines for any or all courses in extreme circumstances. If either type of modification becomes necessary, reasonable notice and communication with the students will be given with explanation and the opportunity to comment on changes. It is the responsibility of the student to check their McMaster email and course websites weekly during the term and to note any changes. Schedule Lectures Day Time Location Comments C01 Mon 5:30pm - 6:20pm ITB AB 102 Starting January 4 Wed 5:30pm - 6:20pm ITB AB 102 Thu 5:30pm - 6:20pm ITB AB 102 Tutorials T01 Mon 1:30pm - 2:20pm BSB 249 Starting January 9 T02 Mon 4:30pm - 5:20pm BSB 249 Starting January 9 T03 Tue 2:30pm - 3:20pm BSB 249 Starting January 10 T04 Mon 10:30am - 11:20am BSB 244 Starting January 9 Drop-in Centre 01 Mon - Fri 10:30am - 2:30pm ETB 126 Run by: John & Ashgar 02 Mon - Fri 9:00am - 4:30pm ITB 242 Office Hours Dr. Sekerinski Wed 12:30pm - 2:30pm ITB 215 Starting January 11 Midterm Tests 01 Thu Feb 9 See Avenuefor rooms During regular class time Details announced on Avenue 02 Thu Mar 16 Final Exam Thu Apr 27, 7:30 pm - 9:30 pm LRW B1007BSB 244 BSB computer lab only for those who without a computer Calendar Description Introduction to fundamental programming concepts: values and types, expressions and evaluation, control flow constructs and exceptions, recursion, input/output and file processing. Three lectures, one tutorial; second term Prerequisite(s): One of MATH 1K03, 1LS3, Grade 12 Advanced Functions and Introductory Calculus U, Grade 12 Calculus and Vectors Antirequisite(s): ENGINEER 1D04 Course Objectives By the end of this course, students will have learned the essential parts of the Python programming language (sufficiently to learn more on Python on one's own) learned how to organize, write, document, test medium-sized programs, be aware of limits of computation, be able to bring an informal problem statement into a computational formulation, learned a number of algorithmic techniques for solving complex problems. Outline of Topics Introduction to Computer Science, Computer Systems, Python programming language, Computational thinking Values and types (innate data types, data encoding, expressions, variables, assignment, strings, lists, object & classes) Imperative programming (modules, flow of control, control structures -- loops, exceptions and exception processing, procedures and parameter passing) Input and Output, files and operations with files Randomization Basics of graphical programming Grading Scheme The grade is based on five components: Meaningful & Memorable (M&M): 10% At the end of every class you are asked to submit via Avenue a paragraph with what you learned in that class - something meaningful and memorable. This allows you to reflect on the class and it gives the instructor immediate feedback. You can submit this on your mobile device right after the class; for those without a mobile device, submission is kept open until 11 pm on the day of class. Each submission counts 0.5%, to a maximum of 10%, which is reached after 20 submissions. As there more than 30 classes with M&Ms, MSAFs or other reasons for absence do not count. Every sensible submission counts - if you think you haven't learned anything, state why, and your submission still counts! Late submissions are not accepted. Labs: 36% The labs are organized as tutorials. You are given exercise questions in advance. You should attempt the exercises on you own, before the tutorial, for which you will need to consult a textbook and have access to a Python 3 installation. Completing these exercises is essential to succeeding in this course - you will not learn to program by simply trying to understand other people's programs! In case you get stuck, the TA running the lab can help you. You are allowed to collaborate with each other. If you can complete the exercises on your own, you do not need to go to your tutorial, attendance is not checked. There are 12 labs and each lab is worth 3%, in total 36%. Incorrect submissions will get partial marks. If you are sick or have another valid University-related reason to miss a lab, you get an extension. However, if you miss a lab, you need to contact the instructor, otherwise a grade of zero is assigned. Some labs have extra questions that count towards any lab: you can get more than 100% on one lab, but all labs in total are still at most 36% of the course grade. Late submissions are not accepted. Tests: 24% There will be two midterm test worth 12%. The midterm test are during regular classes. They will include programming questions. If you miss one of the tests for medical or other valid University-related reasons, the weight will be added to the other test. If you miss both for valid reasons, there will be an oral examination covering that material. In any case, you need to contact the instructor in advance, otherwise a grade of zero is assigned. Final Exam: 30% There will be a two hour examination in the labs. The exam will include programming questions. Textbook The course does not follow strictly a single textbook, but you are advised to get a textbook, in addition to using the language and library reference at python.org. The most recommendable textbook is: John V. Guttag, Introduction to Computation and Programming Using Python, second edition, MIT Press, 2016. This book by a well-known author is also available electronically. Many online resources on Python programming exist, but in general they are not thorough enough to be a substitute for a proper textbook. Other recommendable textbooks are: Ljubomir Perkovic, Introduction to Computing Using Python, Wiley 2012. This book was also used at McMaster, you may be able to get used copies. John M. Zelle, Python Programming: An Introduction to Computer Scienceâ€”2nd Edition Franklin, Beedle, and Associates, 2010. The 2nd edition uses Python 3, which you need, the 1st edition uses Python 2. This book is also available electronically. This is a widely used book, but the order of topics will differ in class. Course Assistance The primary means for getting help are the tutorials. Each tutorial has several TA's, so you should have a chance to talk to a TA. The best is to get together in a group and then ask the TA. You can consult one of the instructional assistants of the departmental Drop-In Centre, see for times above. The Drop-In Centre offers assistance to all Level 1 students taking a course by the Department of Computing and Software. You can also ask questions by e-mail. You can generally expect a reply within 24 hours, but not necessarily on the same day. If a lab is due or you are preparing for a test, don't expect e-mail replies within minutes! There is a discussion forum on Avenue that you can use for informal discussions. While collaboration for lab exercises is permitted and encouraged, don't post any solutions. You learn most by programming yourself. Solutions to selected exercises are discussed in class. Academic Dishonesty Academic dishonesty consists of misrepresentation by deception or by other fraudulent means and can result in serious consequences, e.g. the grade of zero on an assignment, loss of credit with a notation on the transcript (notation reads: "Grade of F assigned for academic dishonesty"), and/or suspension or expulsion from the university. It is the student's responsibility to understand what constitutes academic dishonesty. For information on the various kinds of a academic dishonesty please refer to the Academic Integrity Policy, specifically Appendix 3, located at http://www.mcmaster.ca/policy/Students-AcademicStudies/AcademicIntegrity.pdf In particular, for this course, the following acts of dishonesty apply during any term test or the final exam (all collectively referred to as "exam" in the following 9 acts of academic dishonesty): Copying any of the answers of the exam from other student(s) taking the same exam. Accessing the scrap papers of other student(s) taking the same exam. Receiving any kind of communication from any person with information relevant to answering any of the questions of the exam. Letting any student taking the same exam copy any of your answers of the exam. Letting any student taking the same exam access the scrap papers you are using. Providing any kind of communication to any student taking the same exam with information relevant to answering any of the questions of the exam. Using any kind of unauthorized aids, including books, notes, digital cameras, recording devices of any kind, computing devices of any kind, communication devices of any kind. Using any kind of unauthorized scrap paper. Misrepresenting yourself as somebody else, in particular using a false ID, or an ID belonging to somebody else. Accessibility Students with accessibility needs may receive accommodations for completing assignments and exams. Please contact the Centre for Student Development for advice and for arranging assistance. Students are encouraged to talk to the instructor about this issue. Discrimination The Faculty of Engineering is concerned with ensuring an environment that is free of all discrimination. If there is a problem, individuals are reminded that they should contact the Department Chair, the Sexual Harassment Officer or the Human Rights Consultant, as the problem occurs.