CS1210: Computer Science I: Fundamentals - Spring 2018 CS1210: Computer Science I: Fundamentals Spring 2018 9:30-10:20 MWF, Room W10 Pappajohn Business Building Instructor: James Cremer, 101P MLH, james-cremer@uiowa.edu, 319-321-1893 Office hours: T 1:00-2:00, F 10:30-11:30, and by appointment. TAs: TAs will lead the discussion section meetings, hold office hours, and help grade homework and exams. Riju Ghimire, TBA, discussion sections A07 (W 10:30) and A08 (W 11:30) Apoorva Joshi, TBA, discussion sections A05 (T 3:30) David McDermott, TBA, discussion sections A11 (W 2:30) and A12 (W 3:30) Jonathan Rusert, TBA, discussion sections A02 (W 11:00) and A09 (W 12:30) Alic Szecsei, TBA, discussion sections A03 (T 12:30) and A04 (T 2:00) Momina Tabish, TBA, discussion sections A01 (T 9:30) and A10 (W 1:30) TA Office Hours: TBA ICON site. The course ICON site will be used for: 1) submission of homework assignments, 2) posting grades, and 3) discusssion forums/question threads. All other course information - lecture notes, homework assignments, etc. - will be posted on this web page. Recent Announcements (last updated 1/17/18) 1/17/18 Lecture slides from 1/17 are available. 1/17/18 Welcome to CS1210! Prerequisites Course goals Textbook Grading Lateness/make-up policy Lecture notes and other class supplements Homework assignments Quizzes and exams Computers available Documenting and submitting programs Course software Scores and grades Other online resources Academic honesty Additional syllabus information required by UI/CLAS Prerequisites A math course at the level of MATH1010, 1020, 1340, or 1440 is a pre-requisite. See MyUI entry. Course goals and structure This course has one primary goal - to provide a core of computer science programming concepts and skills, and enough practice using them, that students will develop confidence in their ability to think computationally and to be solve problems via programming. Beyond basic programming concepts, the course provides an introduction to object-oriented programming, algorithmic design and analysis, web programming, and graphical user interfaces. Python is the language used in the course, but we hope that students will understand the underlying concepts well enough to be comfortable picking up other languages. Textbook The textbook for this course is Think Python, 2nd edition by Allen Downey. It is a free well-known book that has been used by many people and courses. Free HTML and downloadable PDF versions are available at thinkpython2.com. You can purchase a printed version at Amazon. Think Python was written in the "open source" spirit. Its copyright page states "Permission is granted to copy, distribute, and/or modify this document under the terms of the Creative Commons Attribution-NonCommercial 3.0 Unported License, which is available at http: //creativecommons.org/licenses/by-nc/3.0/." Several people have used the 1st edition of Think Python as the foundation for slightly different (but again free, ccopy-able, modifiable) "mash-up" books, or for interative online books. E.g.: How to Think Like a Computer Scientist. Learning with Python: Interactive Edition 2.0, by Brad Miller, David Ranum, Jeffrey Elkner, Peter Wentworth, Allen B. Downey, Chris Meyers, and Dario Mitchell. This site is free but does require registration and login. For some of you this could be an extremely effecive on-line textbook. It intersperses multiple choice questions and interactive coding examples with a slightly re-organized and modified version of the Think Python (1st edition) text. You should at least try it. Python for Informatics: Exploring Information, by Charles Severance. This is the book used in the huge (thousands of students) free online Python course, Programming for Everybody. Grading Four components will determine your grade. The total number of points available is 250. (Note: we reserve the right to change the percentages of the components by up to 5% each.) Homework assignments (10 of them, most worth 7 or 8 points each): 30% Discussion section assignments (10 of them, 2 points each): 8% Short surveys on ICON (approx. 12 of them, 5 points total, awarded based on percentage of surveys completed): 2% Exams (2 midterm, one discussion section "lab" exam, one final, 150 points total): 60% Exam 1 (35 points, 14%): Thursday, Feb. 22, 6:30-8:00pm, Macbride Hall Auditorium In-discussion-section exam (30 points, 12%): date to be announced Exam 2 (35 points, 14%): Thursday, April 19, 6:30-8:00pm, 100 Phillips Hall Final Exam (50 points, 20%): TBA Lateness/make-up policy For full credit, homework must be submitted on time. Late submissions will be accepted only when these two conditions are met: 1) a first version (even if minimal work has been completed) is submitted by the regular deadline 2) the late, presumably improved, version is submitted within 24 hours of the original deadline. The late submission will receive 60% of the score it would have received had it been on time. Starting early is important, especially for programing assignments. Except in special circumstances (see the University's policy on "Excused Absences from Examinations"), there will be no make-up exams. Lecture Notes and Other Class Supplements Lecture slides from 1/17 class. Homework assignments None yet Quizzes and exams None yet Computers available For implementing homework assignments, there are Windows PCs in 301 MLH, though many of you will find it most convenient to use Python on your own machines. Python works well on MacOS, Windows, and Linux, so you should have no problem whatever kind of machine you have. Documenting and submitting programs For assignments that contain programming components, you must submit files via ICON. Read homework assignments carefully to make sure you submit the right thing(s). For example, some assignments require that you should submit one Python file, while other assignments require submitting multiple files. Python code must be in .py files (not .txt, .rtf, .doc, etc., files) If the assignment contains multiple files, you should put them all in one folder, zip that folder, and submit the one .zip file to ICON. Note: It is very important that programs be well-written and clear. Programs should be readable by people, not just computers. Coding style and organization may be considered in grading programs. Your code should include comments where appropriate, but avoid the approach of ritualistically filling your code with unhelpful (e.g. "this is a variable") or imprecise (e.g. "this loop goes around and around until it figures out the answer") comments. Ambiguous or inaccurate comments can be worse than none at all. Course software We will use 3 (version 3.3 or later, 3.6 recommended) rather than the still-commonly-used 2.7. Python (and the Idle IDE for Python is available on the Windows in 301 MLH. You can download and install Python and IDLE on your own computer from http://www.python.org/download BUT read the next bullet item for a recommended alternative. During the second half of the course, we will probably use several third-party modules (libraries). Sometimes these modules are not easy for people to install. A few organizations have created Python distrubitions that make access to these modules much easier. For this course, I recommend that you: download and install the Anaconda distribution (by Continuum Analytics). It is free, works on Macs, PCs, and Linux machines, and provides super easy access to a large number of Python modules. Scores and Grades Scores are available on ICON only. Other Online Resources MIT 6.00.1x EdX course. This is my favorite online Python course, developed and taught by really good MIT professors. It is free (though if you want to get a "verified certificate" you will need to pay) The online exercises, homeworks, and exams are graded automatically; if you can successfully do all of the work in the online 6.001x, you're likely to do very well in CS1210. Prof. John Guttag's accompanying book Introduction to Computation and Programming Using Python is also one of my favorites, clear and concise, though probably not best as your only source of material for this course. pythonanywhere website supporting Python-in-a-browser and allowing sharing of Python session (my pythonanywhere user name is "jimcremer" if you try to want to share a session with me to get help) Online Python Tutor website allows stepping forward (and backward) through Python code and visualizing variable values as they are updated. Coding Bat - interactive python exercises The official Python website. Academic Honesty Academic dishonesty will not be tolerated. Under no circumstances should you pass off someone else's work as your own. This applies to code or other material that you might find on the internet. In this class, unless specifically allowed otherwise for a particular assignment, you may not collaborate on homework assignments; you need to complete assignments on your own. We do want students to talk to each other about concepts, solution approaches, and other ideas related to the coursework and assignments. However, it is important to ensure that these discussions do not result in a written or electronic record, nor exchange or sharing of written or electronic material. Use of code from the web is also not allowed unless a particular assignment specifies otherwise. Even in cases where it is appropriate to incorporate code from the Internet or other reference source, such inclusion must be properly cited/credited (this is often done by inserting comment lines prior to the borrowed code stating where you got them, providing a URL, etc.) Please note: We regularly use available software plagiarism detection tools to test originality of homework submissions. See the CLAS Code of Academic Honesty for additional information. Additional syllabus information required by UI/CLAS Additional UI and College of Liberal Arts and Sciences policies relating to this class are given here. This includes information about the administrative home for the course, accommodations for disabilities, complaint procedures, etc. (Note that the complaint policy mentions the DEO. The DEO, or Department Chair, for the Computer Science Department is Professor Alberto Segre).