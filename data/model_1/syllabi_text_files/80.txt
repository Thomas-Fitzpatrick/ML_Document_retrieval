[Return to index] COMP1511 Introduction to Programming School of Computer Science and Engineering, UNSW Overview Code/TitleCOMP1511 Introduction to Computing AbbreviationsITP, 1511 Units of Credit6 Pre-requisitesnone ExcludedCOMP1917, COMP1911, COMP1921 EquivalentCOMP1917 Offered InS1, S2 Â  (commencing 17s1) Classes3 hours lectures/week, 3 hours tute-lab/week AssessmentExam (theory+prac), Labs, Assignments, Quizzes TechnologiesC, Linux, gcc, make, git, gdb Introduction This course aims to introduce students to the practice of developing software solutions to (simple) problems. It would typically be taken in a student's first semester of study. It forms a critical introduction to both computing and the CSE community, and leads on to all of the other courses offered by CSE. The goal of the course is to expose students to: fundamentals of programming problem-solving via software data structures how objects are represented in memory issues of code quality pair programming and teamwork software development as an engineering discipline Assumed Knowledge We assume minimal background in computing, but do assume that students have solid HSC maths and can speak reasonable english. We assume no background in programming or computing, but offer familiarisation labs prior to and early in semester for students who want to learn more about the CSE lab environment. Learning Outcomes On successful completion of this course, students should be able to ... Design software solutions for simple problems Design software solutions for larger problems using abstraction and interfaces Distinguish between well-written programs and poorly written programs Write programs using good programming style Understand and appropriately use abstraction Effectively use memory and pointers in C Understand the low-level functioning of computers (memory, instructions) Create and use simple dynamic data structures such as linked lists and trees Know a range of sorting algorithms and be able to compare their performance Explain the complexity of simple algorithms Test and debug programs Work in a team to develop software Topics Introduction to Programming Abstraction Variables and storage Control flow: if, while, functions Structured data: arrays, structs, linked lists Problem analysis, Design principles Craftsmanship and style Code review & writing codes to be read and modified Searching: linear, binary, simple hashing Sorting: selection, insertion, quicksort Introduction to complexity Programming in the large - programming and design principles Unit testing and debugging Professionalism: time management, teamwork, quality Issues in large projects - practical issues and shipping working product Agile development Simple networking (web based) Major group project (involving agile development and unit testing) Schedule WeekLecturesLabs Week 1introduction, about university, learning, abstraction, estimation, programming, C, problem solvingintroduction, lab/workstation orientation, first program Week 2types, variables, memory, design with functions, top down design, arithmetic expressions, layout, programming styleprogram style, version control Week 3control structures (choice (if), repetition (while)), more functions, scope, defining vs declaring, pass by copy, unit testingdefining, using and testing functions Week 4chars, strings, memory, addresses, pointersBMP file format, version control Week 5arrays, using arrays, pointers and arrays, passing arrays, time managementfractals Week 6run-time stack, frames, typedefteam project, group formation Week 7heap, malloc, structs, abstraction, abstract data types (ADTs), teamworkbuffer overflow, stack frame hacking Week 8more ADTs, standards, interfaces, concrete vs abstract typesQuiet Week (no labs) Week 9dynamic structures, linked lists, reallocimplementing an ADT Week 10searching in arrays, sorting algorithms, complexitylinked lists Week 11project management, testing, unit tests, software development methodologiessorting Week 12professionalism, ethicspractice Prac Exam